package com.issuetracker.service;

import java.util.List;
import java.util.Map;

import com.issuetracker.dao.IssueDAO;
import com.issuetracker.dao.IssueDAOImpl;
import com.issuetracker.exception.IssueTrackerException;
import com.issuetracker.model.Assignee;
import com.issuetracker.model.Issue;
import com.issuetracker.model.IssueReport;
import com.issuetracker.model.IssueStatus;
import com.issuetracker.validator.Validator;

public class IssueServiceImpl implements IssueService {
    
//  Instance Variables
    private AssigneeService assigneeService = new AssigneeServiceImpl();
    private IssueDAO issueDAO = new IssueDAOImpl();
    
    /**
     * @params
     *         issue - The new issue to be reported
     * 
     * @operation Reports a new issue by
     *            * validating its details
     *            * fetch an assignee
     *            * persists the issue in the issueList
     * 
     * @returns
     *          String - The issue id
     */
    @Override
    public String reportAnIssue(Issue issue) throws IssueTrackerException {
	List<Assignee> assigneeList = assigneeService.fetchAssignee(issue.getIssueUnit());
	if( !assigneeList.isEmpty() ) {
	    issue.setAssigneeEmail(assigneeList.get(0).getAssigneeEmail());
	    assigneeService.updateActiveIssueCount(issue.getAssigneeEmail(), 'I');
	}
	String issueId = issueDAO.reportAnIssue(issue);
	if( issueId == null )
	    throw new IssueTrackerException("An issue with the same ID already exists!");
	return issueId;
    }

    /**
     * @params
     *         issueId - The issue id
     *         status - The new status
     * 
     * @operation Updates the status of the given issue with the given status
     * 
     * @returns
     *          Boolean - Result of the status update
     */
    @Override
    public Boolean updateStatus(String issueId, IssueStatus status) throws IssueTrackerException {
	Issue issue = issueDAO.getIssueById(issueId);
	if( issue == null ) 
	    throw new IssueTrackerException("An issue with the given ID is not found!");
	else if( issue.getStatus().equals(status) ) 
	    throw new IssueTrackerException("There is no change in the issue status!");
	else if( status.equals(IssueStatus.RECALLED) && !issue.getStatus().equals(IssueStatus.OPEN) ) 
	    throw new IssueTrackerException("The current issue status is incompatible for recall!");
	else {
	    issueDAO.updateStatus(issue, status);
	    if (!(IssueStatus.OPEN.equals(issue.getStatus()) || IssueStatus.IN_PROGRESS.equals(issue.getStatus())))
		assigneeService.updateActiveIssueCount(issue.getAssigneeEmail(), 'D');
	}  
	return true;
    }

    /**
     * @params
     *         filterCriteria - A map where its
     *         key denotes an attribute of the issue object
     *         value contains the filter value
     * 
     * @operation Generates a report of issues based on the filter criteria
     * 
     * @returns
     *          List<IssueReport> - The list of filtered issue objects
     */
    @Override
    public List<IssueReport> showIssues(Map<Character, Object> filterCriteria) throws IssueTrackerException {
	List<Issue> issueList = issueDAO.getIssueList();
	List<Issue> filteredIssues = new ArrayList<>();
	Set<Character> keySet = filterCriteria.keySet();
	for( Character key : keySet ) {
	    if( key.equals('A') ) {
		filteredIssues = issueList.parallelStream()
					  .filter( issue -> issue.getAssigneeEmail().equals(filterCriteria.get(key)) )
					  .collect(Collectors.toList());
	    }
	    else if( key.equals('S') ) {
		filteredIssues = issueList.parallelStream()
			  .filter( issue -> issue.getStatus().toString().equals(filterCriteria.get(key)) )
			  .collect(Collectors.toList());
	    }
	}
	List<IssueReport> issueReports = new ArrayList<>();
	for( Issue filteredIssue : filteredIssues )  {
	    IssueReport issueReport = new IssueReport( filteredIssue.getIssueId(), filteredIssue.getIssueDescription(), 
	                                   filteredIssue.getAssigneeEmail(), filteredIssue.getStatus());
	    issueReports.add(issueReport);
	}
	if( issueReports.isEmpty() )
	    throw new IssueTrackerException("No issues are found for the requested criteria!");
	return issueReports;
    }


    /**
     * @operation Deletes the issue object which are resolved or closed,
     *            at least 14 days ago
     * 
     * @returns
     *          List<Issue> - The list of issues which had been deleted
     */
    @Override
    public List<Issue> deleteIssues() throws IssueTrackerException {
	// will implement this method
	return null;
    }
    
}